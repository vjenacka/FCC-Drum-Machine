{"version":3,"sources":["sounds/boom.wav","sounds/clap.wav","sounds/hihat.wav","sounds/kick.wav","sounds/openhat.wav","sounds/ride.wav","sounds/snare.wav","sounds/tink.wav","sounds/tom.wav","components/DrumPad.js","components/PadContainer.js","components/Display.js","components/DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","styled","div","DrumPad","togglePlay","e","audio","target","lastChild","currentTime","play","props","renderCurrentNote","note","text","handleKeyDown","key","toUpperCase","drum","document","getElementById","window","addEventListener","this","removeEventListener","className","id","onClick","src","Component","PadContainer","keyCode","notes","drumPadList","map","Display","currentNote","DrumMachine","App","state","boom","clap","hihat","kick","openhat","ride","snare","tink","tom","setState","React","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bb3e89b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boom.550be808.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.a6e86dd7.wav\";","module.exports = __webpack_public_path__ + \"static/media/hihat.4ba39e07.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.4dd58595.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhat.a62db465.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride.b0d70ec5.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.80c4129b.wav\";","module.exports = __webpack_public_path__ + \"static/media/tink.2a6bb6f5.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.572ed39d.wav\";","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px 30px;\r\n  background-color: #ff8f00;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport class DrumPad extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n  togglePlay = e => {\r\n    const audio = e.target.lastChild;\r\n    audio.currentTime = 0;\r\n    audio.play();\r\n    this.props.renderCurrentNote(this.props.note.text);\r\n  };\r\n  handleKeyDown = e => {\r\n    const { note } = this.props;\r\n    if (e.key.toUpperCase() === note.drum) {\r\n      const audio = document.getElementById(`${note.drum}`);\r\n      audio.currentTime = 0;\r\n      audio.play();\r\n      this.props.renderCurrentNote(note.text);\r\n    }\r\n  };\r\n  render() {\r\n    const { note } = this.props;\r\n    return (\r\n      <Wrapper\r\n        className=\"drum-pad\"\r\n        id={`drum-${note.drum}`}\r\n        onClick={this.togglePlay}\r\n      >\r\n        {note.drum}\r\n        <audio className=\"clip\" src={note.src} id={note.drum} />\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React from \"react\";\r\nimport DrumPad from \"./DrumPad\";\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Wrapper= styled.div`\r\n    display:grid;\r\n    grid-template-columns: repeat(3,1fr);\r\n    grid-template-rows: repeat(3,1fr);\r\n    grid-gap:5px;\r\n`\r\n\r\nconst PadContainer= ({keyCode,notes,renderCurrentNote}) =>{\r\n  const drumPadList= notes.map(note=>{\r\n    return <DrumPad key={`${note.drum}-key`} note={note} renderCurrentNote={renderCurrentNote}/>\r\n  })\r\n  return (\r\n    <Wrapper className=\"pad-container\">\r\n      {drumPadList}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default PadContainer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper=styled.div`\r\n\r\n    span{\r\n        display:block;\r\n        min-width:150px;\r\n        min-height:50px;\r\n        background-color:#ff8f00;\r\n        margin-top:70px;\r\n        padding-top:10px;\r\n        font-size:1.8rem;\r\n        text-align:center;\r\n    }\r\n`\r\n\r\nconst Display = ({currentNote}) => {\r\n    return (\r\n        <Wrapper id='display'>\r\n            <span>{currentNote}</span>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Display\r\n","import React from \"react\";\r\nimport PadContainer from \"./PadContainer\";\r\nimport Display from \"./Display\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 50%;\r\n  margin: 25vh auto 0 auto;\r\n  padding: 20px;\r\n  background-color: #ffd54f;\r\n  border: 4px solid #c62828;\r\n`;\r\n\r\nconst DrumMachine = ({notes,currentNote,renderCurrentNote}) => {\r\n  return (\r\n    <Wrapper id=\"drum-machine\">\r\n      <PadContainer notes={notes} renderCurrentNote={renderCurrentNote}/>\r\n      <Display currentNote={currentNote}/>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default DrumMachine;\r\n","import React from \"react\";\nimport DrumMachine from \"./components/DrumMachine\";\n\n//sound imports\nimport boom from \"./sounds/boom.wav\";\nimport clap from \"./sounds/clap.wav\";\nimport hihat from \"./sounds/hihat.wav\";\nimport kick from \"./sounds/kick.wav\";\nimport openhat from \"./sounds/openhat.wav\";\nimport ride from \"./sounds/ride.wav\";\nimport snare from \"./sounds/snare.wav\";\nimport tink from \"./sounds/tink.wav\";\nimport tom from \"./sounds/tom.wav\";\n\nclass App extends React.Component {\n  state = {\n    notes: [\n      { drum: \"Q\", src: boom, text: \"BOOM\" },\n      { drum: \"W\", src: clap, text: \"CLAP\" },\n      { drum: \"E\", src: hihat, text: \"HIHAT\" },\n      { drum: \"A\", src: kick, text: \"KICK\" },\n      { drum: \"S\", src: openhat, text: \"OPENHAT\" },\n      { drum: \"D\", src: ride, text: \"RIDE\" },\n      { drum: \"Z\", src: snare, text: \"SNARE\" },\n      { drum: \"X\", src: tink, text: \"TINK\" },\n      { drum: \"C\", src: tom, text: \"TOM\" }\n    ],\n    currentNote: \"\"\n  };\n  renderCurrentNote = note => {\n    this.setState({\n      currentNote: note\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <DrumMachine\n          notes={this.state.notes}\n          currentNote={this.state.currentNote}\n          renderCurrentNote={this.renderCurrentNote}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}